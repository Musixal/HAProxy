#!/bin/bash

# Logo
show_logo() {
echo -e "${BLUE}"
cat << "EOF"
    __  _____    ____                       
   / / / /   |  / __ \_________  _  ____  __
  / /_/ / /| | / /_/ / ___/ __ \| |/_/ / / /
 / __  / ___ |/ ____/ /  / /_/ />  </ /_/ / 
/_/ /_/_/  |_/_/   /_/   \____/_/|_|\__, /  
                                   /____/   
                  github.com/Musixal v1.2 
EOF
  echo -e "${NC}"
}

# Check if the script is being run as root
if [ "$(id -u)" != "0" ]; then
    echo "This script must be run as root" 1>&2
    sleep 2
    exit 1
fi

# Function to install jq if not already installed
install_jq() {
    if ! command -v jq &> /dev/null; then
        # Check if the system is using apt package manager
        if command -v apt-get &> /dev/null; then
            echo -e "${RED}jq is not installed. Installing...${NC}"
            sleep 1
            sudo apt-get update
            sudo apt-get install -y jq
        else
            echo -e "${RED}Error: Unsupported package manager. Please install jq manually.${NC}\n"
            read -p "Press any key to continue..."
            exit 1
        fi
    
    fi
}


# Install jq
install_jq

install_haproxy() {
    if ! command -v haproxy &> /dev/null; then
        # Check if the system is using apt package manager
        if command -v apt-get &> /dev/null; then
            echo -e "${RED}HAProxy is not installed. Installing...${NC}"
            sleep 1
            sudo apt-get update
            sudo apt-get install -y haproxy
        else
            echo -e "${RED}Error: Unsupported package manager. Please install HAProxy manually.${NC}\n"
            read -p "Press any key to continue..."
            exit 1
        fi
    fi
}

#install HAProxy
install_haproxy


# Fetch server country
SERVER_COUNTRY=$(curl -sS "http://ipwhois.app/json/$SERVER_IP" | jq -r '.country')

# Fetch server isp 
SERVER_ISP=$(curl -sS "http://ipwhois.app/json/$SERVER_IP" | jq -r '.isp')

# Function to display server location and IP
display_server_info() {
    echo -e "${GREEN}Location:${NC} $SERVER_COUNTRY "
    echo -e "${GREEN}Datacenter:${NC} $SERVER_ISP"
}

# Function to show HAProxy status
show_haproxy_status() {
    # Check if HAProxy is installed
    if ! command -v haproxy &>/dev/null; then
        echo -e "${RED}HAProxy is not installed.${NC}"
        return
    fi

    # Check the status of HAProxy service
    systemctl is-active --quiet haproxy && echo -e "${GREEN}HAProxy is active${NC}" || echo -e "${RED}HAProxy is not active${NC}"
}


# Menu for multi-server configuration
multiple_server_menu() {
clear
    echo -e "Select an option:"
    echo
    echo -e "${GREEN}1. New Configuration${NC}"
    echo -e "${BLUE}2. Add a new config${NC}"
    echo -e "${RED}3. Quit${NC}"
    echo
    read -p "Enter your choice: " choice
    case $choice in
        1) configure_new_tunnel ;;
        2) add_new_server ;;
        3) echo -e "${RED}3. Exiting...${NC}" && sleep 1 && return 0 ;;
        *) echo -e "${RED}Invalid option!${NC}" && sleep 1  ;;
    esac
}

# Define the default HAProxy configuration file path
haproxy_config_file="/etc/haproxy/haproxy.cfg"

# Function to configure tunnel
configure_new_tunnel() {
clear
# Prompt the user for confirmation
read -p "All your previous configs will be deleted, continue? (yes/no): " confirm

# Check user's response
if ! [[ $confirm == "yes" || $confirm == "Yes" || $confirm == "YES" ]]; then
	echo -e "${RED}Operation cancelled by user.${NC}" && sleep 1
	return 1
fi

echo

# Verify if the file exists, if not, create it
if [ ! -f "$haproxy_config_file" ]; then
    touch "$haproxy_config_file"
fi

echo "# HAProxy configuration generated by script" > "$haproxy_config_file"
echo "global" >> "$haproxy_config_file"
echo "    log /dev/log    local0" >> "$haproxy_config_file"
echo "    log /dev/log    local1 notice" >> "$haproxy_config_file"
echo "    chroot /var/lib/haproxy" >> "$haproxy_config_file"
echo "    stats socket /run/haproxy/admin.sock mode 660 level admin" >> "$haproxy_config_file"
echo "    stats timeout 30s" >> "$haproxy_config_file"
echo "    user haproxy" >> "$haproxy_config_file"
echo "    group haproxy" >> "$haproxy_config_file"
echo "    daemon" >> "$haproxy_config_file"
echo "" >> "$haproxy_config_file"
echo "defaults" >> "$haproxy_config_file"
echo "    log     global" >> "$haproxy_config_file"
echo "    mode    tcp" >> "$haproxy_config_file"
echo "    option  tcplog" >> "$haproxy_config_file"
echo "    option  dontlognull" >> "$haproxy_config_file"
echo "    timeout connect 5000ms" >> "$haproxy_config_file"
echo "    timeout client  50000ms" >> "$haproxy_config_file"
echo "    timeout server  50000ms" >> "$haproxy_config_file"
echo "" >> "$haproxy_config_file"

# Add multi-port support
while true; do
    read -p "1. Enter HAProxy bind ports (e.g., 443,8443,2096): " haproxy_bind_ports
    read -p "2. Enter Destination ports (in the same order as HAProxy bind ports, e.g., 443,8443,2096): " destination_ports
    read -p "3. Enter Destination (Kharej) IP address: " destination_ip

    # Split the comma-separated ports into arrays
    IFS=',' read -r -a haproxy_ports_array <<< "$haproxy_bind_ports"
    IFS=',' read -r -a destination_ports_array <<< "$destination_ports"

    # Check if both arrays have the same length
    if [ "${#haproxy_ports_array[@]}" -ne "${#destination_ports_array[@]}" ]; then
        echo -e "${RED}The number of HAProxy bind ports and Destination ports must match.${NC}"
        read -p "Press Enter to continue..."
        systemctl stop haproxy
        rm -f "$haproxy_config_file"
        return 1
    fi

    # Iterate over each port in the array
    for i in "${!haproxy_ports_array[@]}"; do
        haproxy_bind_port="${haproxy_ports_array[$i]}"
        destination_port="${destination_ports_array[$i]}"
        
        # Trim any leading or trailing whitespace from the ports
        haproxy_bind_port=$(echo "$haproxy_bind_port" | xargs)
        destination_port=$(echo "$destination_port" | xargs)
        
        # Append frontend and backend configurations to HAProxy configuration file
        echo "frontend frontend_$haproxy_bind_port" >> "$haproxy_config_file"
        echo "    bind *:$haproxy_bind_port" >> "$haproxy_config_file"
        echo "    default_backend backend_$haproxy_bind_port" >> "$haproxy_config_file"
        echo "" >> "$haproxy_config_file"
        echo "backend backend_$haproxy_bind_port" >> "$haproxy_config_file"
        echo "    server server_$haproxy_bind_port $destination_ip:$destination_port" >> "$haproxy_config_file"
        echo "" >> "$haproxy_config_file"
    done
    echo
    read -p "Do you want to add another config? (yes/no): " add_another
    echo
    if [[ $add_another != "yes" ]]; then
        break
    fi
done

echo
echo -e "${GREEN}Configuration updated successfully in $haproxy_config_file${NC}"

  
    # Restart HAProxy service
    systemctl restart haproxy
    
    echo
    read -p "Press Enter to continue..."
}

#Function to add a new server
add_new_server(){
# Verify if the file exists, if not, return
if [ ! -f "$haproxy_config_file" ]; then
     echo
     echo -e "${RED} There is no HAProxy config. First configurate a tunnel through option 1${NC}\n"
     read -p "Press Enter to continue..."
     return 1
fi

clear
while true; do
	clear
    read -p "Enter HAProxy bind port: " haproxy_bind_port
    read -p "Enter Destination (Kharej) IP address: " destination_ip
    read -p "Enter Destination port: " destination_port

    # Append frontend and backend configurations to HAProxy configuration file
    echo "frontend frontend_$haproxy_bind_port" >> "$haproxy_config_file"
    echo "    bind *:$haproxy_bind_port" >> "$haproxy_config_file"
    echo "    default_backend backend_$haproxy_bind_port" >> "$haproxy_config_file"
    echo "" >> "$haproxy_config_file"
    echo "backend backend_$haproxy_bind_port" >> "$haproxy_config_file"
    echo "    server server_$haproxy_bind_port $destination_ip:$destination_port" >> "$haproxy_config_file"
    echo "" >> "$haproxy_config_file"
	echo
    read -p "Do you want to add another config? (yes/no): " add_another
    echo
    if [[ $add_another != "yes" ]]; then
        break
    fi
done

echo -e "${GREEN}Configuration updated successfully in $haproxy_config_file${NC}"
  
    # Restart HAProxy service
    systemctl restart haproxy
    echo
    read -p "Press Enter to continue..."
}

#Function for loadbalancing
load_balancing() {
clear
# Prompt the user for confirmation
read -p "All your previous configs will be deleted, continue? (yes/no): " confirm
echo
# Check user's response
if ! [[ $confirm == "yes" || $confirm == "Yes" || $confirm == "YES" ]]; then
	echo -e "${RED}Operation cancelled by user.${NC}" && sleep 1
	return 1
fi

# Verify if the file exists, if not, create it
if [ ! -f "$haproxy_config_file" ]; then
    touch "$haproxy_config_file"
fi



echo "# HAProxy configuration generated by script" > "$haproxy_config_file"
echo "global" >> "$haproxy_config_file"
echo "    log /dev/log    local0" >> "$haproxy_config_file"
echo "    log /dev/log    local1 notice" >> "$haproxy_config_file"
echo "    chroot /var/lib/haproxy" >> "$haproxy_config_file"
echo "    stats socket /run/haproxy/admin.sock mode 660 level admin" >> "$haproxy_config_file"
echo "    stats timeout 30s" >> "$haproxy_config_file"
echo "    user haproxy" >> "$haproxy_config_file"
echo "    group haproxy" >> "$haproxy_config_file"
echo "    daemon" >> "$haproxy_config_file"
echo "" >> "$haproxy_config_file"
echo "defaults" >> "$haproxy_config_file"
echo "    log     global" >> "$haproxy_config_file"
echo "    mode    tcp" >> "$haproxy_config_file"
echo "    option  tcplog" >> "$haproxy_config_file"
echo "    option  dontlognull" >> "$haproxy_config_file"
echo "    timeout connect 5000ms" >> "$haproxy_config_file"
echo "    timeout client  50000ms" >> "$haproxy_config_file"
echo "    timeout server  50000ms" >> "$haproxy_config_file"
echo "" >> "$haproxy_config_file"

# to display load balancing options
    echo -e "${BLUE}Load balancing options:${NC}"
    echo "1. Round Robin"
    echo "2. Least Connections"
    echo "3. Source IP Hash"
    echo "4. URI Hash"
    read -p "Select the desired load balancing algorithm: " choice
	
    case $choice in
        1) lb_algorithm="roundrobin";;
        2) lb_algorithm="leastconn";;
        3) lb_algorithm="source";;
        4) lb_algorithm="uri";;
        *) echo "Invalid input. Using default load balancing algorithm (roundrobin)."
           lb_algorithm="roundrobin";;
    esac
 
 #Prompt the user for HAProxy bind port   
echo
read -p "*. Enter HAProxy bind port for load balancing: " haproxy_bind_port
echo "frontend tcp_frontend" >> "$haproxy_config_file"
echo "    bind *:${haproxy_bind_port}" >> "$haproxy_config_file"
echo "    mode tcp" >> "$haproxy_config_file"
echo "    default_backend tcp_backend" >> "$haproxy_config_file"
echo "" >> "$haproxy_config_file"
echo "backend tcp_backend" >> "$haproxy_config_file"
echo "    mode tcp" >> "$haproxy_config_file"
echo "    balance $lb_algorithm" >> "$haproxy_config_file"

clear
# Prompt the user for corresponding Destination IP and port
server=1
while true; do
	echo
    read -p "1. Enter Destination IP address for loadbalancing: " destination_ip
    read -p "2. Enter Destination port for loadbalancing: " destination_port
    
echo "    server server${server} ${destination_ip}:${destination_port} check" >> "$haproxy_config_file"
    
    echo
    read -p "Do you want to add another server for load balancing? (yes/no): " add_another

    if [[ $add_another != "yes" ]]; then
        break
    fi
    server=$((server + 1))
    clear
done

echo
echo -e "${GREEN}Configuration updated successfully in $haproxy_config_file${NC}"

  
    # Restart HAProxy service
    systemctl restart haproxy
    
    echo
    read -p "Press Enter to continue..."
    
}

# Function to destroy tunnel
destroy_tunnel() {
echo
# Check if HAProxy service is running
if systemctl is-active --quiet haproxy; then
    echo -e "${RED}Stopping HAProxy service...${NC}\n"
    sleep 1
    # Stop HAProxy service
    systemctl stop haproxy
    echo -e "${GREEN}HAProxy service stopped.${NC}"
else
    echo -e "${YELLOW}HAProxy service is not running.${NC}"
fi

echo
# Check if the file exists
if [ -f "$haproxy_config_file" ]; then
    echo -e "${RED}Removing ${haproxy_config_file}...${NC}\n"
    sleep 1
    # Remove the file
    rm "$haproxy_config_file"
    echo -e "${GREEN}$haproxy_config_file removed.${NC}"
else
    echo -e "${YELLOW}$haproxy_config_file does not exist.${NC}"
fi

echo
    read -p "Press Enter to continue..."
}

# Function to reset service
reset_service() {
echo -e "\n${YELLOW}Restarting HAProxy service...${NC}\n"
sleep 1
# Restart HAProxy
echo "Restarting HAProxy..."
echo
if systemctl restart haproxy ; then
    echo -e "${GREEN}HAProxy restarted successfully.${NC}"
else
    echo -e "${RED}Error: Failed to restart HAProxy.${NC}"
fi

echo
read -p "Press Enter to continue..."
}

view_haproxy_log_realtime() {
	clear
    # Define HAProxy log file path
    haproxy_log_file="/var/log/haproxy.log"

    # Check if HAProxy log file exists
    if [ ! -f "$haproxy_log_file" ]; then
        echo "HAProxy log file not found at $haproxy_log_file"
        return 1
    fi

    # Display HAProxy log in real-time
    echo "Displaying real-time HAProxy log ($haproxy_log_file):"
    tail -f "$haproxy_log_file"
}

# Color codes
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[0;33m'
BLUE='\033[36m'
NC='\033[0m' # No Color


# Function to display menu
display_menu(){
	clear
	show_logo
	display_server_info
	echo "-------------------------------"
	show_haproxy_status
    echo "-------------------------------"
    echo "Menu:"
    echo -e "${GREEN}1. Configure Tunnel (IPv4/v6)${NC}"
    echo -e "${BLUE}2. Configure Loadbalancer (IPv4/v6)${NC}"
    echo -e "${RED}3. Stop HAProxy service and remove configs${NC}"
    echo -e "${YELLOW}4. Restart HAProxy Service${NC}"
    echo -e "5. View HAProxy real-time logs"
    echo "6. Exit"
    echo "-------------------------------"
  }
# Function to read user input
read_option(){
    read -p "Enter your choice: " choice
    case $choice in
        1) multiple_server_menu ;;
        2) load_balancing ;;
        3) destroy_tunnel ;;
        4) reset_service ;;
        5) view_haproxy_log_realtime ;;
        6) echo "Exiting..." && exit ;;
        *) echo -e "${RED}Invalid option!${NC}" && sleep 1 ;;
    esac
}

# Main loop
while true
 do
	display_menu
	read_option
done
